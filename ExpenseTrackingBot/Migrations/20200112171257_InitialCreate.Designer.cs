// <auto-generated />
using System;
using ExpenseTrackingBot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ExpenseTrackingBot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200112171257_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BotDesignerLib.Chat", b =>
                {
                    b.Property<long>("СhatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DataContextId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("СhatId");

                    b.HasIndex("DataContextId");

                    b.HasIndex("StateId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("BotDesignerLib.DataContext", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataContext");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataContext");
                });

            modelBuilder.Entity("BotDesignerLib.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CurrentMessageBlockName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrentMessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasBeenAtLastMessage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProcessedUserInput")
                        .HasColumnType("boolean");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WaitForUserTransition")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("ExpenseTrackingBot.Expense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DomainDataContextId")
                        .HasColumnType("text");

                    b.Property<string>("ExpenseCategoryId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("ExpenseValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DomainDataContextId");

                    b.HasIndex("ExpenseCategoryId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("ExpenseTrackingBot.ExpenseCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DomainDataContextId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainDataContextId");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("ExpenseTrackingBot.GoogleSheetsConnector", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<string>("DomainDataContextId")
                        .HasColumnType("text");

                    b.Property<int?>("SheetId")
                        .HasColumnType("integer");

                    b.Property<string>("Sheetname")
                        .HasColumnType("text");

                    b.Property<string>("SpreadsheetId")
                        .HasColumnType("text");

                    b.HasKey("ChatId");

                    b.HasIndex("DomainDataContextId")
                        .IsUnique();

                    b.ToTable("GoogleSheetsConnector");
                });

            modelBuilder.Entity("ExpenseTrackingBot.DomainDataContext", b =>
                {
                    b.HasBaseType("BotDesignerLib.DataContext");

                    b.Property<string>("CurrentExpenseCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentExpenseId")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasIndex("CurrentExpenseCategoryId")
                        .IsUnique();

                    b.HasIndex("CurrentExpenseId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DomainDataContext");
                });

            modelBuilder.Entity("BotDesignerLib.Chat", b =>
                {
                    b.HasOne("BotDesignerLib.DataContext", "DataContext")
                        .WithMany()
                        .HasForeignKey("DataContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotDesignerLib.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpenseTrackingBot.Expense", b =>
                {
                    b.HasOne("ExpenseTrackingBot.DomainDataContext", "DomainDataContext")
                        .WithMany("Expenses")
                        .HasForeignKey("DomainDataContextId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExpenseTrackingBot.ExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ExpenseCategoryId");
                });

            modelBuilder.Entity("ExpenseTrackingBot.ExpenseCategory", b =>
                {
                    b.HasOne("ExpenseTrackingBot.DomainDataContext", "DomainDataContext")
                        .WithMany("ExpenseCategories")
                        .HasForeignKey("DomainDataContextId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExpenseTrackingBot.GoogleSheetsConnector", b =>
                {
                    b.HasOne("ExpenseTrackingBot.DomainDataContext", "DomainDataContext")
                        .WithOne("GoogleSheetsConnector")
                        .HasForeignKey("ExpenseTrackingBot.GoogleSheetsConnector", "DomainDataContextId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExpenseTrackingBot.DomainDataContext", b =>
                {
                    b.HasOne("ExpenseTrackingBot.ExpenseCategory", "CurrentExpenseCategory")
                        .WithOne()
                        .HasForeignKey("ExpenseTrackingBot.DomainDataContext", "CurrentExpenseCategoryId");

                    b.HasOne("ExpenseTrackingBot.Expense", "CurrentExpense")
                        .WithOne()
                        .HasForeignKey("ExpenseTrackingBot.DomainDataContext", "CurrentExpenseId");
                });
#pragma warning restore 612, 618
        }
    }
}
